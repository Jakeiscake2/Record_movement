#include "main.h"
#include <iostream>
#include <vector>
#include <fstream>
using namespace std;
using namespace pros;

void initialize()
{
	lcd::initialize();

	lcd::set_text(1, "Screen working");
}
void disabled() {}
void competition_initialize()
{
}
void autonomous() {}
void opcontrol()
{
	Controller controls(E_CONTROLLER_MASTER);
	Motor indexer(19);
	Motor flywheel1(20);
	Motor flywheel2(21);

	Motor FrontLeft(1, E_MOTOR_GEARSET_18, false, E_MOTOR_ENCODER_DEGREES);
	Motor BackLeft(2, E_MOTOR_GEARSET_18, false, E_MOTOR_ENCODER_DEGREES);

	Motor FrontRight(3, E_MOTOR_GEARSET_18, true, E_MOTOR_ENCODER_DEGREES);
	Motor BackRight(4, E_MOTOR_GEARSET_18, true, E_MOTOR_ENCODER_DEGREES);

	Motor intake_roller(17, E_MOTOR_GEARSET_18, false, E_MOTOR_ENCODER_DEGREES);
	int x1, y1, x2, y2 = 0;
	int index_return = millis();
	// time_int = int(millis());
	int time_int;
	int left_speeds = 0, right_speeds = 0;
	while (true)
	{

		x1 = controls.get_analog(E_CONTROLLER_ANALOG_LEFT_X);
		y1 = controls.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);

		x2 = controls.get_analog(E_CONTROLLER_ANALOG_RIGHT_X);
		y2 = controls.get_analog(E_CONTROLLER_ANALOG_RIGHT_Y);
		left_speeds = y2 - y1 - x1 - x2;
		right_speeds = y2 - y1 + x1 + x2;
		FrontLeft = left_speeds;
		BackLeft = left_speeds;
		FrontRight = right_speeds;
		BackRight = right_speeds;

		/*
		if y2 positive all negtative
		if y1 positive all positive
		if x1 negtative, left negative, right positive
		if x1 positive, left positive, right negative
		if x2 negtative, left negative, right positive
		if x2 positive, left positive, right negative

		*/

		/*
		if (control.get_digital(E_CONTROLLER_DIGITAL_R2))
		{
			indexer_expansion.move_relative(100, 100);
		}
		else if (control.get_digital(E_CONTROLLER_DIGITAL_DOWN))
		{
			indexer_expansion.move_relative(-100, 100);
		}

		if (index_return <= millis())
		{
			indexer_expansion.move_relative(0, 100);
		}

		if (control.get_digital(E_CONTROLLER_DIGITAL_R1))
		{
			intake_roller = 127;
		}
		else
		{
			intake_roller = 0;
		}

		if (control.get_digital(E_CONTROLLER_DIGITAL_L1))
		{
			flywheel = 127;
		}
		else if (control.get_digital(E_CONTROLLER_DIGITAL_L2))
		{
			flywheel = 0;
		}
		*/
		/*
		 if(int(flywheel.get_position())!=listOfMoves[4].v.back().rotation){
			 listOfMoves[4].v.push_back({int(flywheel.get_position()),time_int});
		 }
		 */

		lcd::set_text(2, to_string(left_speeds * 2.20472440945));
		lcd::set_text(3, to_string(right_speeds * 2.20472440945));
		string controller_battery = to_string(controls.get_battery_level()) + '/' + to_string(controls.get_battery_capacity());
		controls.set_text(0, 0, controller_battery);
		delay(60);
	}
}
